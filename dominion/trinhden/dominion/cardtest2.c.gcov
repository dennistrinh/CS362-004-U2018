        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:
        -:   10:/*********************************************
        -:   11: * void assertTrue(int, int)
        -:   12: * This function checks for equality between
        -:   13: * two values and lets the user know
        -:   14: * if the test passed or not.
        -:   15:**********************************************/
       17:   16:void assertTrue(int x, int y) {
       17:   17:  if (x == y) {
       15:   18:    printf("TEST SUCCESSFULLY COMPLETED\n");
        -:   19:  } else {
        2:   20:    printf("TEST FAILED\n");
        2:   21:    printf("After: %d | Before: %d\n", x, y);
        -:   22:  }
       17:   23:}
        -:   24:
        1:   25:int main() {
        -:   26:  // Declare all the necessary variables
        1:   27:  int seed = 1111;
        1:   28:  int numPlayers = 2;
        1:   29:  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   30:  int player1 = 0;
        1:   31:  int player2 = 1;
        1:   32:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   33:	       sea_hag, tribute, smithy, council_room};
        -:   34:
        -:   35:  // Records the state before and after a card effect
        -:   36:  struct gameState before, after;
        1:   37:  memset(&before, 23, sizeof(struct gameState));
        1:   38:  memset(&after, 23, sizeof(struct gameState));
        -:   39:  
        -:   40:  // Initialize the game and copy the state to "before" 
        1:   41:  initializeGame(numPlayers, k, seed, &after);
        1:   42:  memcpy(&before, &after, sizeof(struct gameState));
        -:   43:
        -:   44:  // Testing
        1:   45:  printf("Testing: Adventurer\n");
        1:   46:  cardEffect(adventurer, choice1, choice2, choice3, &after, handpos, &bonus);
        -:   47:
        -:   48:  // Check if the player drew 2 cards (Note: +1 to account for adventurer discard)
        -:   49:  // Note: Adventurer card doesn't discard, so left as +2
        1:   50:  printf("\nTest: Player 1 drew two cards\n");
        1:   51:  assertTrue(after.handCount[player1], before.handCount[player1] + 2);
        -:   52:
        -:   53:  // Player should have gained two treasure
        1:   54:  printf("\nTest: Player 1 gained two treasure cards\n");
        -:   55:  int i, currentCard;
        1:   56:  int afterCount = 0, beforeCount = 0;
        -:   57:
        -:   58:  // See how many treasures were gained by adventurer card
        9:   59:  for (i = 0; i < after.handCount[player1]; i++) {
        8:   60:    currentCard = after.hand[player1][i];
        8:   61:    if (currentCard == copper || currentCard == silver || currentCard == gold) {
        7:   62:      afterCount++;
        -:   63:    }
        -:   64:  }
        -:   65:
        -:   66:  // See how many treasures the player had before adventurer was played
        6:   67:  for (i = 0; i < before.handCount[player1]; i++) {
        5:   68:    currentCard = before.hand[player1][i];
        5:   69:    if (currentCard == copper || currentCard == silver || currentCard == gold) {
        4:   70:      beforeCount++;
        -:   71:    }
        -:   72:  }
        -:   73:
        1:   74:  assertTrue(afterCount, beforeCount + 2);
        -:   75:
        -:   76:  // Player 2's state should remain unchanged
        1:   77:  printf("\nPlayer 2 should remain unchanged\n");
        1:   78:  printf("Test: Player 2's Deck Count\n");
        1:   79:  assertTrue(after.deckCount[player2], before.deckCount[player2]);
        1:   80:  printf("Test: Player 2's Hand Count\n");
        1:   81:  assertTrue(after.handCount[player2], before.handCount[player2]);
        -:   82:  
        -:   83:  // The kingdom supply should be unchanged
        1:   84:  printf("\nThe kingdom supply should be unchanged\n");
        1:   85:  printf("This should return 10 successful tests\n");
       11:   86:  for (i = 0; i < 10; i++) {
       10:   87:    printf("Test %d: ", i);
       10:   88:    assertTrue(after.supplyCount[k[i]], before.supplyCount[k[i]]);
        -:   89:  }
        -:   90:
        -:   91:  // Victory cards should remain unchanged
        1:   92:  printf("\nThe victory card supply should remain unchanged\n");
        -:   93:  // Estate supply
        1:   94:  printf("Test: Estate quantity\n");
        1:   95:  assertTrue(after.supplyCount[estate], before.supplyCount[estate]);
        -:   96:  // Duchy supply
        1:   97:  printf("Test: Duchy quantity\n");
        1:   98:  assertTrue(after.supplyCount[duchy], before.supplyCount[duchy]);
        -:   99:  // Province supply
        1:  100:  printf("Test: Province quantity\n");
        1:  101:  assertTrue(after.supplyCount[province], before.supplyCount[province]);
        -:  102:
        1:  103:  return 0;
        -:  104:
        -:  105:}
