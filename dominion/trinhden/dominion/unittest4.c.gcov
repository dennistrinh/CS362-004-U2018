        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:
        -:   10:/*********************************************
        -:   11: * void assertTrue(int, int)
        -:   12: * This function checks for equality between
        -:   13: * two values and lets the user know
        -:   14: * if the test passed or not.
        -:   15:**********************************************/
        4:   16:void assertTrue(int x, int y) {
        4:   17:  if (x == y) {
        4:   18:    printf("TEST SUCCESSFULLY COMPLETED\n");
        -:   19:  } else {
    #####:   20:    printf("TEST FAILED\n");
    #####:   21:    printf("After: %d | Before: %d\n", x, y);
        -:   22:  }
        4:   23:}
        -:   24:
        1:   25:int main() {
        -:   26:  // Declare all the necessary variables
        1:   27:  int seed = 1111;
        1:   28:  int numPlayers = 2;
        1:   29:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   30:	       sea_hag, tribute, smithy, council_room};
        1:   31:  int player = 0;
        1:   32:  int toFlag = 0;
        -:   33:  // Initialize the state
        -:   34:  struct gameState state;
        1:   35:  memset(&state, 23, sizeof(struct gameState));
        -:   36:  
        -:   37:  // Initialize the game 
        1:   38:  initializeGame(numPlayers, k, seed, &state);
        -:   39:
        -:   40:  // Testing
        1:   41:  printf("Testing: gainCard()\n");
        -:   42:  
        -:   43:  // If a supply pile is empty, return -1.
        1:   44:  printf("\nTest: There are no more adventurer cards, cannot gain a card.\n");
        1:   45:  state.supplyCount[adventurer] = 0;
        1:   46:  assertTrue(gainCard(adventurer, &state, toFlag, player), -1);
        -:   47:
        -:   48:  // If adding a card to the deck, deck count should increase by 1 (toFlag = 1)
        1:   49:  toFlag = 1;
        1:   50:  state.supplyCount[adventurer] = 5;
        1:   51:  printf("\nTest: Adding an adventurer to the player's deck, deck size increased by 1\n");
        1:   52:  int before = state.deckCount[player];
        1:   53:  gainCard(adventurer, &state, toFlag, player);
        1:   54:  assertTrue(state.deckCount[player], before + 1);
        -:   55:  
        -:   56:  // If toFlag = 2 [add to hand], the hand count of the player should increase by 1.
        1:   57:  toFlag = 2;
        1:   58:  printf("\nTest: Adding an adventurer to the player's hand, hand size increased by 1\n");
        1:   59:  before = state.handCount[player];
        1:   60:  gainCard(adventurer, &state, toFlag, player);
        1:   61:  assertTrue(state.handCount[player], before + 1);
        -:   62:
        -:   63:  // Otherwise if toFlag = 0, discard count should increase by 1.
        1:   64:  toFlag = 0;
        1:   65:  printf("\nTest: Adding an adventurer to the player's discard, discard size increased by 1\n");
        1:   66:  before = state.discardCount[player];
        1:   67:  gainCard(adventurer, &state, toFlag, player);
        1:   68:  assertTrue(state.discardCount[player], before + 1);
        -:   69:
        1:   70:  return 0;
        -:   71:
        -:   72:}
