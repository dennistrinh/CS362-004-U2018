        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <time.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:// Globals
        -:   11:int fails = 0;
        -:   12:
     5000:   13:int checkSmithy(int x, struct gameState *post) {
     5000:   14:  int bonus = 0;
        -:   15:
        -:   16:  // Like testDrawCard, game state variable that allow
        -:   17:  // manual testing of function actions
        -:   18:  struct gameState pre;
     5000:   19:  memcpy (&pre, post, sizeof(struct gameState));
        -:   20:  
        -:   21:  // Call smithy card effect
     5000:   22:  cardEffect(smithy, 0, 0, 0, post, 0, &bonus);  
        -:   23:
        -:   24:  // Break apart the smithy function into multiple parts
        -:   25:  // It draws 3 cards and discards itself.
     5000:   26:  drawCard(x, &pre);
     5000:   27:  drawCard(x, &pre);
     5000:   28:  drawCard(x, &pre);
     5000:   29:  discardCard(0, x, &pre, 0);
        -:   30:
        -:   31:  // Hand and deck counts
        -:   32:  // Booleans to determine equality
     5000:   33:  int handCount = 0;
     5000:   34:  int deckCount = 0;
        -:   35:
        -:   36:  // If the counts are equal return true (1)
     5000:   37:  if (pre.handCount[x] == post->handCount[x]) {
    #####:   38:    handCount = 1;
        -:   39:  }
     5000:   40:  if (pre.deckCount[x] == post->deckCount[x]) {
    #####:   41:    deckCount = 1;
        -:   42:  }
        -:   43:
        -:   44:  // If both true, test is okay. Otherwise, increment fails.
     5000:   45:  if (handCount == 1 && deckCount == 1) {
    #####:   46:    printf("Test success.\n");
        -:   47:  } else {
     5000:   48:    fails++;
        -:   49:  }
        -:   50:
     5000:   51:}
        -:   52:
        1:   53:int main () {
        -:   54:
        1:   55:  printf("\nRandom Test for Smithy Card\n");
        -:   56:  
        -:   57:  // Initialize the game varibles
        1:   58:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   59:	       remodel, smithy, village, baron, great_hall};
        1:   60:  int tests = 5000;
        -:   61:  struct gameState G;
        -:   62:  int i, j, p;
        1:   63:  srand(time(NULL));
        -:   64:
        -:   65:  // Randomize the game state
     5001:   66:  for (i = 0; i < tests; i++) {
131505000:   67:    for (j = 0; j < sizeof(struct gameState); j++) {
131500000:   68:      ((char*)&G)[i] = floor(Random() * 256);
        -:   69:    }
     5000:   70:    p = floor(Random() * MAX_PLAYERS);
     5000:   71:    G.deckCount[p] = floor(Random() * MAX_DECK);
     5000:   72:    G.discardCount[p] = floor(Random() * MAX_DECK);
     5000:   73:    G.handCount[p] = floor(Random() * MAX_HAND);
     5000:   74:    G.whoseTurn = p;
     5000:   75:    checkSmithy(p, &G);
        -:   76:  }
        -:   77:  
        -:   78:  // Print out results of random test.
        1:   79:  printf("\nResults of the tests\n");
        1:   80:  printf("FAILS: Hand or Deck Count doesn't match: %d\n", fails);
        1:   81:  printf("SUCCESS: Tests passed - %d\n\n", tests - fails);
        -:   82:
        1:   83:  return 0;
        -:   84:}
